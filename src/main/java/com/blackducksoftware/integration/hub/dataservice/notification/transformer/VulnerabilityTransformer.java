/**
 * Hub Common
 *
 * Copyright (C) 2017 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.blackducksoftware.integration.hub.dataservice.notification.transformer;

import java.util.ArrayList;
import java.util.List;

import com.blackducksoftware.integration.hub.api.item.MetaService;
import com.blackducksoftware.integration.hub.api.notification.NotificationRequestService;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilityNotificationContent;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilityNotificationItem;
import com.blackducksoftware.integration.hub.api.notification.VulnerabilitySourceQualifiedId;
import com.blackducksoftware.integration.hub.api.policy.PolicyRequestService;
import com.blackducksoftware.integration.hub.api.project.version.ProjectVersionRequestService;
import com.blackducksoftware.integration.hub.api.version.VersionBomPolicyRequestService;
import com.blackducksoftware.integration.hub.dataservice.notification.model.FullProjectVersionView;
import com.blackducksoftware.integration.hub.dataservice.notification.model.NotificationContentItem;
import com.blackducksoftware.integration.hub.dataservice.notification.model.VulnerabilityContentItem;
import com.blackducksoftware.integration.hub.exception.HubItemTransformException;
import com.blackducksoftware.integration.hub.service.HubRequestService;

import io.swagger.client.model.ComponentVersionView;
import io.swagger.client.model.NotificationView;

public class VulnerabilityTransformer extends AbstractNotificationTransformer {

	public VulnerabilityTransformer(final NotificationRequestService notificationService, final ProjectVersionRequestService projectVersionService, final PolicyRequestService policyService,
			final VersionBomPolicyRequestService bomVersionPolicyService, final HubRequestService hubRequestService, final MetaService metaService) {
		super(notificationService, projectVersionService, policyService, bomVersionPolicyService, hubRequestService, metaService);
	}

	@Override
	public List<NotificationContentItem> transform(final NotificationView item) throws HubItemTransformException {
		final List<NotificationContentItem> notificationContentItems = new ArrayList<>();
		try {
			final VulnerabilityNotificationItem vulnerabilityNotificationItem = (VulnerabilityNotificationItem) item;
			final VulnerabilityNotificationContent vulnerabilityNotificationContent = vulnerabilityNotificationItem.getContent();

			final String componentName = vulnerabilityNotificationContent.getComponentName();
			final String componentVersionUrl = vulnerabilityNotificationContent.getComponentVersionLink();
			final ComponentVersionView fullComponentVersion = getComponentVersion(componentVersionUrl);

			final List<VulnerabilitySourceQualifiedId> addedVulnList = extractIdList(vulnerabilityNotificationContent.getNewVulnerabilityCount(), vulnerabilityNotificationContent.getNewVulnerabilityIds());
			final List<VulnerabilitySourceQualifiedId> updatedVulnList = extractIdList(vulnerabilityNotificationContent.getUpdatedVulnerabilityCount(), vulnerabilityNotificationContent.getUpdatedVulnerabilityIds());
			final List<VulnerabilitySourceQualifiedId> deletedVulnList = extractIdList(vulnerabilityNotificationContent.getDeletedVulnerabilityCount(), vulnerabilityNotificationContent.getDeletedVulnerabilityIds());

			final List<FullProjectVersionView> affectedProjectVersionList = vulnerabilityNotificationItem.getContent().getAffectedProjectVersions();
			if (affectedProjectVersionList == null || affectedProjectVersionList.isEmpty()) {
				notificationContentItems.add(new VulnerabilityContentItem(item.getCreatedAt(), new FullProjectVersionView(), componentName, fullComponentVersion, componentVersionUrl, addedVulnList, updatedVulnList, deletedVulnList));
			} else {
				for (final FullProjectVersionView affectedProjectVersion : affectedProjectVersionList) {
					final FullProjectVersionView fullProjectVersion = createFullProjectVersion(affectedProjectVersion.getUrl(), affectedProjectVersion.getProjectName(), affectedProjectVersion.getVersionName());
					notificationContentItems.add(new VulnerabilityContentItem(item.getCreatedAt(), fullProjectVersion, componentName, fullComponentVersion, componentVersionUrl, addedVulnList, updatedVulnList, deletedVulnList));
				}
			}
		} catch (final Exception e) {
			throw new HubItemTransformException(e);
		}
		return notificationContentItems;
	}

	private List<VulnerabilitySourceQualifiedId> extractIdList(final int count, final List<VulnerabilitySourceQualifiedId> idList) {
		if (count > 0 && idList != null && idList.size() > 0) {
			return idList;
		}
		return new ArrayList<>();
	}

}
